######################################################################
# This file is part of the Irrvuan OS image builder script suite.
#
# Copyright 2018 Urban Wallasch <irrwahn35@freenet.de>
#
# See LICENSE file for more details.
#

function Stage_4() {
    if [ $ISOCREATE -eq 0 ] ; then
        return
    fi

    log "--- ${FUNCNAME[0]} build ISO image ---"
    CLEANUP="Stage_4_cleanup $CLEANUP"

    sudo umount -lf "$MOUNTP/sys" "$MOUNTP/proc" 2>/dev/null
    sudo umount -lf "$MOUNTP/dev/pts" "$MOUNTP/dev" 2>/dev/null

    local ISODIR="$TMPDIR/iso/"
    mkdir -p "$ISODIR/isolinux" | tee -a "$LOGFILE"
    mkdir -p "$ISODIR/live" | tee -a "$LOGFILE"

    log "Copy kernel and initrd"
    local kernel=$(ls $MOUNTP/boot/vmlinuz* | head -n1)
    local initrd=${kernel//vmlinuz/initrd.img}
    cp -v --preserve=mode,timestamps "$kernel" "$ISODIR/live/vmlinuz" \
        2>&1 | tee -a "$LOGFILE"
    cp -v --preserve=mode,timestamps "$initrd" "$ISODIR/live/initrd.img" \
        2>&1 | tee -a "$LOGFILE"

    log "Create sqashfs"
    touch "$ISODIR/live/filesystem.squashfs"
    sudo mksquashfs \
        "$MOUNTP" \
        "$ISODIR/live/filesystem.squashfs" \
        -noappend \
        -no-progress \
        -wildcards -e 'boot/*' \
        2>&1 | tee -a "$LOGFILE"

    log "Copy isolinux and modules"
    cp -v --preserve=mode,timestamps /usr/lib/ISOLINUX/isolinux.bin \
        "$ISODIR/isolinux/" 2>&1 | tee -a "$LOGFILE"
    cp -v --preserve=mode,timestamps /usr/lib/syslinux/modules/bios/* \
        "$ISODIR/isolinux/" 2>&1 | tee -a "$LOGFILE"

    log "Create isolinux.cfg"
    cat <<EOHEREDOC | tee "$ISODIR/isolinux/isolinux.cfg" | tee -a "$LOGFILE"
UI menu.c32
PROMPT 0
MENU TITLE Live Boot Menu
TIMEOUT 300

LABEL live
  MENU LABEL $ISOMENULABEL
  MENU DEFAULT
  KERNEL /live/vmlinuz
  APPEND initrd=/live/initrd.img boot=live toram=filesystem.squashfs

LABEL disk0
  MENU LABEL ^Internal Boot
  LOCALBOOT -1
EOHEREDOC

    log "Generate ISO image using $ISOGENCMD"
    local ISOFILE="${IMGFILE%.*}.iso"
    $ISOGENCMD \
        -rational-rock \
        -volid "$ISOVOLID" \
        -joliet \
        -b isolinux/isolinux.bin \
        -c isolinux/boot.cat \
        -no-emul-boot \
        -boot-load-size 4 \
        -boot-info-table \
        -o "$ISOFILE" \
        "$ISODIR" \
        2>&1 | tee -a "$LOGFILE"

    # Make ISO image hybrid bootable, if possible
    if command -pv isohybrid ; then
        log "INFO: 'isohybrid' found, patching ISO image for USB boot."
        isohybrid -v "$ISOFILE" 2>&1 | tee -a "$LOGFILE"
    else
        log "WARNING: 'isohybrid' not found, image will not be USB bootable!"
    fi
}

function Stage_4_cleanup() {
    log "--- ${FUNCNAME[0]} ---"
}

# EOF

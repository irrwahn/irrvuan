######################################################################
# This file is part of the Irrvuan OS image builder script suite.
#
# Copyright 2018 Urban Wallasch <irrwahn35@freenet.de>
#
# See LICENSE file for more details.
#

function Stage_4() {
    if [ $LIVECREATE -eq 0 ] ; then
        return
    fi

    log "--- ${FUNCNAME[0]} build live image(s) ---"
    CLEANUP="Stage_4_cleanup $CLEANUP"

    sudo umount -lf "$MOUNTP/sys" "$MOUNTP/proc" 2>/dev/null
    sudo umount -lf "$MOUNTP/dev/pts" "$MOUNTP/dev" 2>/dev/null

    local LIVEDIR="$TMPDIR/livesys/"
    mkdir -p "$LIVEDIR/boot" | tee -a "$LOGFILE"
    mkdir -p "$LIVEDIR/live" | tee -a "$LOGFILE"

    export \
        _LIVE_KERNEL_="/live/vmlinuz" \
        _LIVE_INITRD_="/live/initrd.img" \
        _LIVE_SQFS_="filesystem.squashfs"

    log "Create sqashfs"
    touch "$LIVEDIR/live/$_LIVE_SQFS_"
    sudo mksquashfs \
        "$MOUNTP" \
        "$LIVEDIR/live/$_LIVE_SQFS_" \
        -noappend \
        -no-progress \
        -wildcards -e 'boot/*' \
        2>&1 | tee -a "$LOGFILE"

    log "Copy kernel and initrd"
    local kernel=$(ls $MOUNTP/boot/vmlinuz* | head -n1)
    local initrd=${kernel//vmlinuz/initrd.img}
    cp -v --preserve=mode,timestamps "$kernel" "$LIVEDIR/$_LIVE_KERNEL_" \
        2>&1 | tee -a "$LOGFILE"
    cp -v --preserve=mode,timestamps "$initrd" "$LIVEDIR/$_LIVE_INITRD_" \
        2>&1 | tee -a "$LOGFILE"

    log "Substitute live variables and copy stuff"
    local _live_vars='\
        $_LIVE_KERNEL_ \
        $_LIVE_INITRD_ \
        $_LIVE_SQFS_'
    find "$TMPDIR/boot/" -type f | \
        while read f; do var_subst "$f" "$_live_vars" ; done
    cp -vR --preserve=mode,timestamps "$SYSLINUXMOD/." "$LIVEDIR/boot/syslinux"
        2>&1 | tee -a "$LOGFILE"
    cp -vR --preserve=mode,timestamps "$TMPDIR/boot/." "$LIVEDIR/boot/" \
        2>&1 | tee -a "$LOGFILE"

    if [ $ISOCREATE -ne 0 ] ; then
        log "Create ISO live image"
        cp -v --preserve=mode,timestamps "$ISOLINUXBIN" "$LIVEDIR/boot/syslinux"
            2>&1 | tee -a "$LOGFILE"
        local ISOFILE="${IMGFILE%.*}.iso"
        $ISOGENCMD \
            -rational-rock \
            -volid "$LIVEVOLID" \
            -joliet \
            -b boot/syslinux/isolinux.bin \
            -c boot/boot.cat \
            -no-emul-boot \
            -boot-load-size 4 \
            -boot-info-table \
            -o "$ISOFILE" \
            "$LIVEDIR" \
            2>&1 | tee -a "$LOGFILE"
        # Make ISO image hybrid bootable, if possible
        if command -pv isohybrid ; then
            log "INFO: 'isohybrid' found, patching ISO image for USB boot."
            isohybrid -v "$ISOFILE" 2>&1 | tee -a "$LOGFILE"
        else
            log "WARNING: 'isohybrid' not found, image will not be USB bootable!"
        fi
    fi

    if [ $USBCREATE -ne 0 ] ; then
        log "Create USB live image"
        local USBFILE="${IMGFILE%.*}.usb"
        truncate -s "$USBSIZE"M "$USBFILE"
        check $? "truncate"
        mkfs.vfat -F 32 -n "$LIVEVOLID" -v "$USBFILE" 2>&1 | tee -a "$LOGFILE"
        check $? "mkfsys failed"
        USBMOUNT="$MOUNTP/mnt"
        sudo mount -oloop "$USBFILE" "$USBMOUNT"
        check $? "mount"
        sudo cp -vR --preserve=timestamps "$LIVEDIR/." "$USBMOUNT" \
            2>&1 | tee -a "$LOGFILE"

        local psize=$(df --output=avail "$USBMOUNT" | tail -n1)
        psize=$(($psize / 1024 - 100))
        [ $psize -gt 4096 ] && psize=4096
        log "Create USB persistence file of $psize MB"
        sudo truncate -s "$psize"M "$USBMOUNT/persistence" \
            && sudo mkfs.ext4 -L "persistence" -F -v "$USBMOUNT/persistence" \
                2>&1 | tee -a "$LOGFILE" \
            && sudo mkdir "$USBMOUNT/pmnt" \
            && sudo mount -oloop "$USBMOUNT/persistence" "$USBMOUNT/pmnt" \
            && log "Create persistence.conf" \
            && echo "/ union" | sudo tee "$USBMOUNT/pmnt/persistence.conf" \
            && sudo umount "$USBMOUNT/pmnt" \
            && sudo rmdir "$USBMOUNT/pmnt"

        log "Install syslinux boot loader"
        sudo umount -lfv "$USBMOUNT" 2>&1 | tee -a "$LOGFILE"
        syslinux -d /boot/syslinux/ -i "$USBFILE" 2>&1 | tee -a "$LOGFILE"
    fi
}

function Stage_4_cleanup() {
    log "--- ${FUNCNAME[0]} ---"
}

# EOF
